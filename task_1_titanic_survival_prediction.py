# -*- coding: utf-8 -*-
"""Task-1 TITANIC SURVIVAL PREDICTION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_2jhdRNVRq5BeesYIIYRFls0hWcZvsAa
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# loading the dataset
data = pd.read_csv('/content/Titanic-Dataset.csv')

# dropping missing values
data = data.dropna(subset=['Survived', 'Pclass', 'Sex', 'Age', 'Fare', 'Embarked'])

# encoding categorical variables
data['Sex'] = data['Sex'].map({'male': 0, 'female': 1})
data['Embarked'] = data['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})

# checking unique values
print("Unique values in the dataset:")
print(data.nunique())

# correlation analysis
corr_matrix = data.drop(['Name', 'Ticket' , 'Cabin'], axis=1).corr()
print("\nCorrelation Matrix:")
print(corr_matrix)

# visualization of correlation
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='YlOrRd')
plt.title('Correlation Matrix')
plt.show()

# survival Rate
# calculating and visualizing survival rate
survival_rate = data['Survived'].mean()
print(f"\nSurvival Rate: {survival_rate:.2f}")
plt.figure(figsize=(6, 4))
sns.countplot(x='Survived', data=data)
plt.title('Survival Rate')
plt.xlabel('Survived')
plt.ylabel('Count')
plt.show()

# survival Rate by Sex
# calculating and visualizing survival rate by sex
survival_rate_male = data[data['Sex'] == 0]['Survived'].mean()
survival_rate_female = data[data['Sex'] == 1]['Survived'].mean()
print(f"Survival Rate for Men: {survival_rate_male:.2f}")
print(f"Survival Rate for Women: {survival_rate_female:.2f}")
plt.figure(figsize=(6, 4))
sns.countplot(x='Survived', hue='Sex', data=data)
plt.title('Survival Rate by Sex')
plt.xlabel('Survived')
plt.ylabel('Count')
plt.legend(title='Sex')
plt.show()

# survival rate by Pclass
# calculating and visualizing survival rate by Pclass
survival_rate_pclass1 = data[data['Pclass'] == 1]['Survived'].mean()
survival_rate_pclass2 = data[data['Pclass'] == 2]['Survived'].mean()
survival_rate_pclass3 = data[data['Pclass'] == 3]['Survived'].mean()

print(f"Survival Rate for Pclass 1: {survival_rate_pclass1:.2f}")
print(f"Survival Rate for Pclass 2: {survival_rate_pclass2:.2f}")
print(f"Survival Rate for Pclass 3: {survival_rate_pclass3:.2f}")
plt.figure(figsize=(6, 4))
sns.countplot(x='Survived', hue='Pclass', data=data)
plt.title('Survival Rate by Pclass')
plt.xlabel('Survived')
plt.ylabel('Count')
plt.legend(title='Pclass')
plt.show()




# model building
# spliting data into features,target
X = data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]
y = data['Survived']

# spliting data into training,testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# logistic regression
lr_model = LogisticRegression()
lr_model.fit(X_train, y_train)
lr_pred = lr_model.predict(X_test)
lr_accuracy = accuracy_score(y_test, lr_pred)
lr_cm = confusion_matrix(y_test, lr_pred)
lr_report = classification_report(y_test, lr_pred)

print("Logistic Regression:")
print(f"Accuracy: {lr_accuracy:.2f}")
print("Confusion Matrix:")
print(lr_cm)
print("Classification Report:")
print(lr_report)

# decision tree
dt_model = DecisionTreeClassifier()
dt_model.fit(X_train, y_train)
dt_pred = dt_model.predict(X_test)
dt_accuracy = accuracy_score(y_test, dt_pred)
dt_cm = confusion_matrix(y_test, dt_pred)
dt_report = classification_report(y_test, dt_pred)

print("\nDecision Tree:")
print(f"Accuracy: {dt_accuracy:.2f}")
print("Confusion Matrix:")
print(dt_cm)
print("Classification Report:")
print(dt_report)

# random forest
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
rf_pred = rf_model.predict(X_test)
rf_accuracy = accuracy_score(y_test, rf_pred)
rf_cm = confusion_matrix(y_test, rf_pred)
rf_report = classification_report(y_test, rf_pred)

print("\nRandom Forest:")
print(f"Accuracy: {rf_accuracy:.2f}")
print("Confusion Matrix:")
print(rf_cm)
print("Classification Report:")
print(rf_report)